---
title: "Antibody Analysis Heatmap"
author: Kirk Gosik
Date: "`r format(Sys.time(), '%m/%d/%Y')`"
output: 
  html_document:
    toc: true
    toc_float: true
---

```{r setup, message = FALSE, error = FALSE, warning = FALSE}
pkgs <- installed.packages()
needed_pkgs <- c("knitr", "stringr", "qtl2", "magrittr", "dplyr", "ggplot2", "GGally", "bestNormalize", "abind")

if( any( !{ needed_pkgs %in% rownames(pkgs) }) ) {
  install.packages(needed_pkgs[!{needed_pkgs %in% rownames(pkgs)}])
}


library(knitr)
library(stringr)
library(qtl2)
#library(readxl)
library(magrittr)
library(dplyr)
library(ggplot2)
library(plotly)
library(GGally)
library(bestNormalize)
library(abind)
library(RColorBrewer)
library(visNetwork)
library("gplots")
library("devtools")
## heatmap.3 function
source_url("https://raw.githubusercontent.com/obigriffith/biostar-tutorials/master/Heatmaps/heatmap.3.R")
```


```{r LoadData, echo = FALSE, message = FALSE, error = FALSE, warning = FALSE}
project_path <- "/ahg/regevdata/projects/FASI_DOmice/"
if( length(dir(project_path)) == 0 ) project_path <- "/Volumes/ahg_regevdata/projects/FASI_DOmice/"

## assigning project paths
geno_path <- paste0(project_path, "genotype/")
pheno_path <- paste0(project_path, "phenotype/")
my_path <- paste0(project_path, "kirk/")

## Phenotype file already exists
if( length(paste0(pheno_path, "pheno_batch4_processed.csv")) == 0 ) {
  # Load Phenotypes
  pheno <- read_excel(
    dir(pheno_path,
        pattern = "phenotype_data_four_batches_v1.xlsx",
        full.names = TRUE)
    ) %>%
    as.data.frame
}

# ## Load Genotypes or Alleletypes
# ## first 2 batches C1_ - C36_
# # batch12_aprobs <- readRDS(paste0(geno_path, "Regev_genoprobs_20171221.rds"))
# load(paste0(geno_path, "probs.8state_Gary20171221.Rdata"))
# 
# # load rest of the batches
# load(paste0(geno_path,"probs.8state.Rdata")) # apr
# # load(paste0(geno_path, "probs.36state.Rdata")) # pr
# 
# ## Marker Map
# load(paste0(geno_path, "Regev_map_20171221.Rdata"))
# ## map <- readRDS(paste0(geno_path, "Regev_map_20171221.rds")
# 
# cat("Finished Loading Data...", "\n")
```
# Preparing Data

```{r PrepData, message = FALSE, error = FALSE, warning = FALSE}
  # all transformation columns
if( length(paste0(pheno_path, "pheno_batch4_processed.csv")) == 0 ) {
  pheno <- pheno %>%
  #  filter(is.na(excluded)) %>% # keep only passing samples
    rename(Mmcp1 = `Mmcp-1`) %>%
    mutate(Batches = factor(pheno$Batches),
           excluded = ifelse(is.na(excluded), 0, 1),
           BW_1st = as.numeric(BW_1st),
           BW_2nd = as.numeric(BW_2nd),
           BW_3rd = as.numeric(BW_3rd),
           BW_4th = as.numeric(BW_4th),
           BW_5th = as.numeric(BW_5th),
           IgA_log = log(IgA + 0.01),
           IgE_log = log(IgE + 0.01),
           IgG1_log = log(IgG1 + 0.01),
           IgG2_log = log(IgG2 + 0.01),
           IgM_log = log(IgM + 0.01),
           Mmcp1_log = log(Mmcp1 + 0.01),
           IgA_boxcox = boxcox(IgA + 0.01)$x.t,
           IgE_boxcox = boxcox(IgE + 0.01)$x.t,
           IgG1_boxcox = boxcox(IgG1 + 0.01)$x.t,
           IgG2_boxcox = boxcox(IgG2 + 0.01)$x.t,
           IgM_boxcox = boxcox(IgM + 0.01)$x.t,
           Mmcp1_boxcox = boxcox(Mmcp1 + 0.01)$x.t,
           IgEIgG1ratio = IgE/IgG1,
           IgEIgG1ratio_log = log(IgE/IgG1))

  # pheno$PC1_antibody = prcomp(pheno[,3:7], center = TRUE, scale = TRUE)$x[, 1]
  # pheno$PC1_antibody_log <- prcomp(pheno[,22:27], center = TRUE, scale = TRUE)$x[, 1]
  # pheno$PC1_antibody_boxcox <- prcomp(pheno[,28:32], center = TRUE, scale = TRUE)$x[, 1]
  write.csv(pheno, paste0(pheno_path, "pheno_batch4_processed.csv"), row.names = FALSE)
}else {
  pheno <- read.csv(paste0(pheno_path, "pheno_batch4_processed.csv"))
  pheno$Batches <- factor(pheno$Batches)
  cnames <- colnames(pheno)[c(3:14,16,20, 22:33)]
  
  options(na.action='na.pass')
  dat_na_removed <- model.matrix(object = as.formula(paste("~ 0 +", paste(cnames, collapse = "+"))), 
                                 data = pheno,
                                 contrasts.arg = list(Batches = contrasts(pheno$Batches, contrasts = F)))

  
  ## removing exluded mice
  pheno <- pheno %>% filter(excluded == 0)

}
```


```{r HeatmapFunction, message = FALSE, error = FALSE, warning = FALSE}
myheatmap <- function(plotdata, main_title) {
  
  bw_colors <- sort(unique(pheno$BW_1st))
  names(bw_colors) <- colorRampPalette(brewer.pal(8, "Oranges"))(17)
  
  mouse_color <- c("black","grey", "white")[pheno$Color]
  mouse_batch <- c("Red", "Blue", "Green", "Purple")[pheno$Batches]
  mouse_bw_colors <- names(bw_colors)[pheno$BW_1st - 12]

  rowlabs <- t(cbind(mouse_color, mouse_batch, mouse_bw_colors))
  rownames(rowlabs) <- c("Color", "Batch", "Weight")

  main_title = main_title
  par(cex.main=1)
  heatmap.3(x = plotdata, 
            na.rm = TRUE, 
            scale="none", 
            dendrogram = "both", 
            margins = c(6,12),
            Rowv = TRUE, 
            Colv = TRUE, 
            RowSideColors = rowlabs, 
            symbreaks = FALSE, 
            key = TRUE, 
            symkey = FALSE,
            density.info = "none", 
            trace = "none", 
            main = main_title, 
            col = colorRampPalette(brewer.pal(8, "Blues"))(25), 
            labCol = sapply(c("IgA", "IgE", "IgG1", "IgG2", "IgM", "Mmcp1"), function(p) na.omit(str_extract(colnames(plotdata), p))),
            labRow = FALSE,
            RowSideColorsSize = 2, 
            KeyValueName = "Antibody")
  legend("topright",
         legend = c("Batch1", "Batch2", "Batch3", "Batch4", "", "black mouse","white mouse", "grey mouse", "", "Low Weight", "Medium Weight", "High Weight"),
         fill = c("Red", "Blue", "Green", "Purple", "white", "black", "white", "grey", "white", names(bw_colors)[c(2,8,17)]), 
         border = FALSE, 
         bty = "n", 
         y.intersp = 0.7, 
         cex = 0.7)
  
  }
```


```{r, echo = FALSE, eval = FALSE, include = FALSE}
## Include genoprobs names in phenotype data
nms <- rownames(apr[[1]])
probsnames <- data.frame(ProbsName = nms, 
                         ID = str_extract(nms, "C[0-9]{1,2}_[0-9]"), 
                         genotyping_date = str_extract(nms, "Broad_Inst_Xu_MURGIGV01_[0-9]{8}"),
                         stringsAsFactors = FALSE)

pheno <- pheno %>% 
  left_join(probsnames, by = c("ID", "genotyping_date"))

rownames(pheno) <- pheno$ID



## rename sample ids to match phenotype data batch 1 and 2 allele probs
for( nm in names(batch12_aprobs) ) {
  rownames(batch12_aprobs[[nm]]) <- gsub("\\.", "_", rownames(batch12_aprobs[[nm]]))
  rownames(batch12_aprobs[[nm]])[rownames(batch12_aprobs[[nm]]) %in% "C63_3"] <- "C36_3"
}


## Selecting only immune phenotype DO mice alleleprobs
immune_mice <- pheno$ProbsName[!is.na(pheno$ProbsName)]
for( chr in names(apr) ) {
  apr[[chr]] <- apr[[chr]][immune_mice, , ]
}


## rename sample ids to match phenotype data
nms <- rownames(apr[[1]])
nms <- str_extract(nms, "C[0-9]{1,2}_[0-9]")
for( chr in names(apr) ) {
  rownames(apr[[chr]]) <- nms
}


## Mismatch of Markers between Dan's Run (batch12_aprobs) and Vivek's Run (apr)
## Finding common Markers
keep_markers <- sapply(names(apr), function(chr) {
  intersect(unlist(dimnames(apr[[chr]])[3]), unlist(dimnames(batch12_aprobs[[chr]])[3])) 
  }, 
  USE.NAMES = TRUE, 
  simplify = FALSE)

## combing allele probs together across common markers
for( chr in names(apr) ) {
  apr[[chr]] <- abind(apr[[chr]][,,keep_markers[[chr]]], batch12_aprobs[[chr]][,,keep_markers[[chr]]], along = 1)
}


## Sync sample names
samples <- intersect(rownames(pheno), rownames(apr[["1"]]))

## keeping samples for phenotype
pheno <- pheno[samples, , drop = FALSE]

## keeping sampes for allele probs
for( nm in names(apr) ) {
  apr[[nm]] <- apr[[nm]][samples, , ]
}

stopifnot(nrow(pheno) == nrow(apr[[1]]))
stopifnot(rownames(pheno) == rownames(apr[[1]]))

# Creating kinship matrix
K <- calc_kinship(probs = apr, type = "loco", cores = 8)

cat("Finished Prepping Data...", "\n")
```


# Correlation Plots

## All Metrics

Edge List Indicates a correlation between the two metrics of at least 0.3.  Green Edges are postively correlated while red are negatively correlated

```{r MetricsCorr}
cordata <- cor(dat_na_removed, use = "pairwise.complete.obs")
cordata_reduced <- sapply(colnames(cordata)[1:19], function(p) {
  apply(cordata[, grep(p, colnames(cordata)), drop = FALSE], 1, max, na.rm = T)
  })
cordata_reduced <- cordata_reduced[1:19, ]
cordata_reduced[abs(cordata_reduced) < 0.3] <- 0

net <- igraph::graph_from_adjacency_matrix(adjmatrix = cordata_reduced, weighted = TRUE, mode = "lower", diag = FALSE)

visdata <- toVisNetworkData(net)

nodes <- visdata$nodes
edges <- visdata$edges
edges$color <- ifelse(edges$weight > 0, "green", "red")


# igraph::E(net)$color <- edges$color
# # l <- igraph::layout_as_tree(net)
# # l <- igraph::layout_nicely(net)
# l <- igraph::layout_in_circle(net)
# # l <- igraph::layout_on_sphere(net)
# # l <- igraph::layout_as_star(net)
# plot(net, layout = l, vertex.size = 25)

visNetwork(nodes, edges, width = "100%") %>%
  visEdges(shadow = TRUE) %>%
  visInteraction(dragNodes = TRUE,
                 dragView = TRUE,
                 zoom = TRUE) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visIgraphLayout("layout_in_circle")
```


## Original Data

### Correlation Plot

```{r CorrPlotOrig, message = FALSE, error = FALSE, warning = FALSE}
ggplotly(
  ggpairs(pheno[, c("IgA", "IgE", "IgG1", "IgG2", "IgM", "Mmcp1")], title = "Original Data")
  )
```

### Heatmap


```{r Heatmap3, echo=FALSE, eval = FALSE, include=FALSE}
#Load necessary packages
library("gplots")
library("devtools")

#Load latest version of heatmap.3 function
source_url("https://raw.githubusercontent.com/obigriffith/biostar-tutorials/master/Heatmaps/heatmap.3.R")

#Create a fake dataset for demonstration purposes
prob_matrix = replicate(100, rnorm(20))
drug_names=paste("drug",letters[1:20],sep="_")
patient_ids=paste("patient",c(1:100),sep="_")
rownames(prob_matrix)=drug_names
colnames(prob_matrix)=patient_ids

#Create fake color side bars
drugclass_colors=sample(c("darkorchid","darkred"), length(drug_names), replace = TRUE, prob = NULL)
drugcategory_colors=sample(c("green","darkgreen"), length(drug_names), replace = TRUE, prob = NULL)
subtype_colors=sample(c("red","blue","cyan","pink","yellow","green"), length(patient_ids), replace = TRUE, prob = NULL)
Mcolors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
Ncolors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
Tcolors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
HER2colors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
PRcolors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
ERcolors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
rlab=t(cbind(drugclass_colors,drugcategory_colors))
clab=cbind(subtype_colors,Mcolors,Ncolors,Tcolors,HER2colors,PRcolors,ERcolors)
rownames(rlab)=c("Class","Category")
colnames(clab)=c("Subtype","M","N","T","HER2","PR","ER")

#Define custom dist and hclust functions for use with heatmaps
mydist=function(c) {dist(c,method="euclidian")}
myclust=function(c) {hclust(c,method="average")}


main_title="Drug Response Predictions"
par(cex.main=1)
heatmap.3(prob_matrix, hclustfun=myclust, distfun=mydist, na.rm = TRUE, scale="none", dendrogram="both", margins=c(6,12),
Rowv=TRUE, Colv=TRUE, ColSideColors=clab, RowSideColors=rlab, symbreaks=FALSE, key=TRUE, symkey=FALSE,
density.info="none", trace="none", main=main_title, labCol=FALSE, labRow=drug_names, cexRow=1, col=rev(heat.colors(75)),
ColSideColorsSize=7, RowSideColorsSize=2, KeyValueName="Prob. Response")
legend("topright",legend=c("Basal","LumA","LumB","Her2","Claudin","Normal","","Positive","Negative","NA","","Targeted","Chemo","","Approved","Experimental"),
fill=c("red","blue","cyan","pink","yellow","green","white","black","white","grey","white","darkorchid","darkred","white","green","darkgreen"), border=FALSE, bty="n", y.intersp = 0.7, cex=0.7)

```



```{r FirstTry, echo = FALSE, eval = FALSE, include = FALSE}


mouse_color <- c("black","grey", "white")[pheno$Color]
mouse_batch <- c("Red", "Blue", "Green", "Purple")[pheno$Batches]

rowlabs <- t(cbind(mouse_color, mouse_batch))
rownames(rowlabs) <- c("Color", "Batch")


plotdata <- scale(pheno[, c("IgA", "IgE", "IgG1", "IgG2", "IgM", "Mmcp1")])
rownames(plotdata) <- pheno$ID

main_title="Antibody Response"
par(cex.main=1)
heatmap.3(x = plotdata, 
          na.rm = TRUE, 
          scale="none", 
          dendrogram = "both", 
          margins = c(6,12),
          Rowv = TRUE, 
          Colv = TRUE, 
          RowSideColors = rowlabs, 
          symbreaks = FALSE, 
          key = TRUE, 
          symkey = FALSE,
          density.info = "none", 
          trace = "none", 
          main = main_title, 
          col = colorRampPalette(brewer.pal(8, "Blues"))(25), 
          RowSideColorsSize = 2, 
          KeyValueName = "Antibody")
legend("topright",
       legend = c("Batch1", "Batch2", "Batch3", "Batch4", "", "black mouse","grey mouse", "white mouse"),
       fill = c("Red", "Blue", "Green", "Purple", "white", "black","grey", "white"), 
       border = FALSE, 
       bty = "n", 
       y.intersp = 0.7, 
       cex = 0.7)
```



```{r HeatmapOrig, message = FALSE, error = FALSE, warning = FALSE}
plotdata <- scale(pheno[, c("IgA", "IgE", "IgG1", "IgG2", "IgM", "Mmcp1")])
rownames(plotdata) <- pheno$ID

myheatmap(plotdata, "Original Data")
```


## Log Transform

### Correlation Plot

```{r CorrPlotLog, message = FALSE, error = FALSE, warning = FALSE}
ggplotly(
  ggpairs(pheno[, c("IgA_log", "IgE_log", "IgG1_log", "IgG2_log", "IgM_log", "Mmcp1_log")], title = "Log Transformed")
  )

```


### Heatmap

```{r HeatmapLog, message = FALSE, error = FALSE, warning = FALSE}
plotdata <- scale(pheno[, c("IgA_log", "IgE_log", "IgG1_log", "IgG2_log", "IgM_log", "Mmcp1_log")])
rownames(plotdata) <- pheno$ID

myheatmap(plotdata, "Log Data")
```

## Box-Cox Transform

### Correlation Plot

```{r CorrPlotBoxcox, message = FALSE, error = FALSE, warning = FALSE}
ggplotly(
  ggpairs(pheno[, c("IgA_boxcox", "IgE_boxcox", "IgG1_boxcox", "IgG2_boxcox", "IgM_boxcox", "Mmcp1_boxcox")], title = "Boxcox Transformed")
  )
```

### Heatmap

```{r HeatmapBoxcox, message = FALSE, error = FALSE, warning = FALSE}
plotdata <- scale(pheno[, c("IgA_boxcox", "IgE_boxcox", "IgG1_boxcox", "IgG2_boxcox", "IgM_boxcox", "Mmcp1_boxcox")])
rownames(plotdata) <- pheno$ID

myheatmap(plotdata, "Boxcox Data")
```




## Box-Cox Transform  By Batch

### Correlation Plot

```{r CorrPlotBoxcoxByBatch, message = FALSE, error = FALSE, warning = FALSE}
iga <- unlist(sapply(1:4, function(i) boxcox(pheno[pheno$Batches == i, "IgA"]+0.01)$x.t))
ige <- unlist(sapply(1:4, function(i) boxcox(pheno[pheno$Batches == i, "IgE"]+0.01)$x.t))
igg1 <- unlist(sapply(1:4, function(i) boxcox(pheno[pheno$Batches == i, "IgG1"]+0.01)$x.t))
igg2 <- unlist(sapply(1:4, function(i) boxcox(pheno[pheno$Batches == i, "IgG2"]+0.01)$x.t))
igm <- unlist(sapply(1:4, function(i) boxcox(pheno[pheno$Batches == i, "IgM"]+0.01)$x.t))
mmcp1 <- unlist(sapply(1:4, function(i) boxcox(pheno[pheno$Batches == i, "Mmcp1"]+0.01)$x.t))

plotdata <- data.frame(IgA = iga,
                       IgE = ige,
                       IgG1 = igg1,
                       IgG2 = igg2,
                       IgM = igm,
                       Mmcp1 = mmcp1)

ggplotly(
  ggpairs(plotdata, title = "Boxcox By Batch")
  )
```

### Heatmap
```{r HeatmapBoxcoxByBatch, message = FALSE, error = FALSE, warning = FALSE}
myheatmap(plotdata, "Boxcox By Batch Data")
```
