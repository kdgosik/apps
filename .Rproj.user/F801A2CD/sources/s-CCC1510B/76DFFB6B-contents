library(Rcpp)
library(ggplot2)
library(dplyr)
library(shiny)

opt = theme(legend.position  = "none",
            panel.background = element_rect(fill="white"),
            axis.ticks       = element_blank(),
            panel.grid       = element_blank(),
            axis.title       = element_blank(),
            axis.text        = element_blank())
 
cppFunction('DataFrame createTrajectory(int n, double x0, double y0, 
            double a, double b, double c, double d) {
            // create the columns
            NumericVector x(n);
            NumericVector y(n);
            x[0]=x0;
            y[0]=y0;
            for(int i = 1; i < n; ++i) {
            x[i] = sin(a*y[i-1])+c*cos(a*x[i-1]);
            y[i] = sin(b*x[i-1])+d*cos(b*y[i-1]);
            }
            // return a new data frame
            return DataFrame::create(_["x"]= x, _["y"]= y);
            }
            ')
 
# a <- -1.24458046630025
# b <- -1.25191834103316 
# c <- -1.81590817030519 
# d <- -1.90866735205054
#  
# df <- createTrajectory(10000000, 0, 0, a, b, c, d)
#  
# png("Clifford.png", units="px", width=1600, height=1600, res=300)
# ggplot(df, aes(x, y)) + geom_point(color="black", shape=46, alpha=.01) + opt
# dev.off()


# ui section
ui = fluidPage(
  
  #  Title
  titlePanel("Clifford Attractor"),
  
  # Sidebar with slider and controls for animation
  sidebarLayout(
    
    # sidebar with slider
    sidebarPanel(
      
      sliderInput(inputId = "a", label = "a", min = -2, max = 2, value = 0, step = 0.05),
      sliderInput(inputId = "b", label = "b", min = -2, max = 2, value = 0, step = 0.05),
      sliderInput(inputId = "c", label = "c", min = -2, max = 2, value = 0, step = 0.05),
      sliderInput(inputId = "d", label = "d", min = -2, max = 2, value = 0, step = 0.05),
      
      # # Slider with looping
      # sliderInput(inputId = "step", 
      #             label = "Step", 
      #             min = 1, 
      #             max = 100000, 
      #             value = 1, 
      #             step = 10, 
      #             animate = animationOptions(interval=1, 
      #                                      loop = TRUE,
      #                                      playButton = TRUE, 
      #                                      pauseButton = TRUE)),
      
      actionButton(inputId = "create", "Create Plot")
    ),
    
    # Show the animated graph
    mainPanel(
      plotOutput(outputId = "plot1")
    )
  )
)



# server section
server = function(input, output, session) {
  
  createdf <- eventReactive(input$create, {
    
    df <- createTrajectory(1000000, 0, 0, input$a, input$b, input$c, input$d)
    df
    
  })
  
  # # Reactive expression to create data frame and graph
  # df_reactive <- reactive({
  #   
  #   df <- createTrajectory(1000000, 0, 0, input$a, input$b, input$c, input$d)
  #   
  #   # subset the data frame into the portion that has the data for the
  #   # graph in the animation sequence
  #   
  #   # Save subset of 'dat' and pass it to the plot
  #   df_sub <- df[1:input$step, ]
  #   df_sub
  #   
  # }) 
  
  # Show the graph
  output$plot1 <- renderPlot({
    
    # p <- ggplot(df_reactive(), aes(x, y)) + 
    #   geom_point(color = "black", shape = 46, alpha = 0.5) + 
    #   opt
    # p
    
    p <- ggplot(createdf(), aes(x, y)) + 
      geom_point(color = "black", shape = 46, alpha = 0.5) + 
      opt
    p
    
  })
}

# run the app
runApp(list(ui = ui, server = server), launch.browser = TRUE)
